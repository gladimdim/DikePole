{"version":3,"sources":["Story.js","App.js","serviceWorker.js","index.js"],"names":["Story","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentText","story","undefined","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","response","text","wrap","_context","prev","next","fetch","sent","setState","ink","Continue","stop","apply","arguments","index","ChooseChoiceIndex","_opts","objectSpread","_this2","react_default","createElement","currentChoices","length","name","map","choice","onClick","_optionSelected","_continue","Component","App","className","Story_Story","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAGaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,YAAa,KACbC,WAAOC,GAJIV,EADvB,OAAAC,OAAAU,EAAA,EAAAV,CAAAJ,EAAAC,GAAAG,OAAAW,EAAA,EAAAX,CAAAJ,EAAA,EAAAgB,IAAA,oBAAAC,MAAA,eAAAC,EAAAd,OAAAe,EAAA,EAAAf,CAAAgB,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAU+BC,MAAM,cAVrC,cAUcN,EAVdG,EAAAI,KAAAJ,EAAAE,KAAA,EAW2BL,EAASC,OAXpC,OAWcA,EAXdE,EAAAI,KAYQzB,KAAK0B,SAAS,SAACtB,EAAOR,GAClB,IAAMU,EAAQ,IAAIqB,QAAUR,GAC5B,MAAO,CACHb,QACAD,YAAaC,EAAMsB,cAhBnC,wBAAAP,EAAAQ,SAAAZ,EAAAjB,SAAA,yBAAAY,EAAAkB,MAAA9B,KAAA+B,YAAA,KAAArB,IAAA,kBAAAC,MAAA,SAqBoBqB,GACZhC,KAAKI,MAAME,MAAM2B,kBAAkBD,GACnChC,KAAK0B,SAAS,SAACtB,EAAO8B,GAClB,OAAOpC,OAAAqC,EAAA,EAAArC,CAAA,GACAM,EADP,CAEIC,YAAaD,EAAME,MAAMsB,iBA1BzC,CAAAlB,IAAA,YAAAC,MAAA,WAgCQX,KAAK0B,SAAL5B,OAAAqC,EAAA,EAAArC,CAAA,GACOE,KAAKI,MADZ,CAEIC,YAAaL,KAAKI,MAAME,MAAMsB,gBAlC1C,CAAAlB,IAAA,SAAAC,MAAA,WAsCa,IAAAyB,EAAApC,KACL,OAAkB,MAAdA,KAAKI,YAAsCG,IAArBP,KAAKI,MAAME,MACzB+B,EAAAtB,EAAAuB,cAAA,yBAGRD,EAAAtB,EAAAuB,cAAA,WACID,EAAAtB,EAAAuB,cAAA,WAAMtC,KAAKI,MAAMC,aAChBL,KAAKI,MAAME,MAAMiC,eAAeC,OAAS,EACtCH,EAAAtB,EAAAuB,cAAA,OAAKG,KAAK,WACLzC,KAAKI,MAAME,MAAMiC,eAAeG,IAAK,SAAAC,GAClC,OAAON,EAAAtB,EAAAuB,cAAA,UAAQ5B,IAAKiC,EAAOX,MAAOY,QAAS,kBAAMR,EAAKS,gBAAgBF,EAAOX,SAASW,EAAOxB,SAGnGkB,EAAAtB,EAAAuB,cAAA,UAAQM,QAAS,kBAAMR,EAAKU,cAA5B,iCAnDtBpD,EAAA,CAA2BqD,aCWZC,mLARX,OACEX,EAAAtB,EAAAuB,cAAA,OAAKW,UAAU,OACbZ,EAAAtB,EAAAuB,cAACY,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAtB,EAAAuB,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.acfa57ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as ink from 'inkjs';\r\n\r\nexport class Story extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentText: null,\r\n            story: undefined\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(\"story.json\");\r\n        const text = await response.text();\r\n        this.setState((state, props) => {\r\n            const story = new ink.Story(text);\r\n            return {\r\n                story,\r\n                currentText: story.Continue()\r\n            }\r\n        });\r\n    }\r\n\r\n    _optionSelected(index) {\r\n        this.state.story.ChooseChoiceIndex(index);\r\n        this.setState((state, _opts) => {\r\n            return {\r\n                ...state,\r\n                currentText: state.story.Continue()\r\n            }\r\n        });\r\n    }\r\n\r\n    _continue() {\r\n        this.setState({\r\n            ...this.state,\r\n            currentText: this.state.story.Continue()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state == null || this.state.story === undefined) {\r\n            return (<div>Loading...</div>);\r\n        }\r\n        return (\r\n            <div>\r\n                <div>{this.state.currentText}</div>\r\n                {this.state.story.currentChoices.length > 0 ?\r\n                    <div name=\"options\">\r\n                        {this.state.story.currentChoices.map((choice => {\r\n                            return <button key={choice.index} onClick={() => this._optionSelected(choice.index)}>{choice.text}</button>\r\n                        }))}\r\n                    </div>\r\n                    : <button onClick={() => this._continue()}>Далі</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {Story} from './Story';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Story></Story>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}